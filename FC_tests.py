import math
import random

# SLOT MACHINE SETUP
# FRUIT COCKTAIL
from FC import symbols, paytable, paylines, ROWS, COLS, wild, NUM_PAYLINES

population = []

# –∑—Ä–æ–±–∏—Ç–∏ –±–∞—Ä–∞–±–∞–Ω
def make_population():
    for symbol, probability in symbols.items():
        population.extend([symbol] * int(probability * 200))  # –°—Ç–≤–æ—Ä—é—î–º–æ "–ø—É–ª" —Å–∏–º–≤–æ–ª—ñ–≤
    random.shuffle(population)

# SPIN GENERATION
def –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏_–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é(–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞—Ä–∞–±–∞–Ω—ñ–≤=5):
    """–ì–µ–Ω–µ—Ä—É—î –≤–∏–ø–∞–¥–∫–æ–≤—É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–∞ –±–∞—Ä–∞–±–∞–Ω–∞—Ö."""
    return [random.choice(population) for _ in range(–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞—Ä–∞–±–∞–Ω—ñ–≤)]

def –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è_–≤–∏–≥—Ä–∞—à_—Å–∏–º–≤–æ–ª—É(—Å–∏–º–≤–æ–ª, –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π_–≤–∏–≥—Ä–∞—à, –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö):
    if –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö in paytable.get(—Å–∏–º–≤–æ–ª, {}):
        return max(–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π_–≤–∏–≥—Ä–∞—à, paytable[—Å–∏–º–≤–æ–ª][–∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö])
    else:
        return –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π_–≤–∏–≥—Ä–∞—à

# CALC WIN
def wild_combination_win(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è):
    –≤–∏–≥—Ä–∞—à = 0
    –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö = 1 if –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è[0] == wild else 0
    for i in range(1, len(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)):
        if –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è[i] == wild:
            –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö += 1
        else:
            –≤–∏–≥—Ä–∞—à = –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è_–≤–∏–≥—Ä–∞—à_—Å–∏–º–≤–æ–ª—É(wild, –≤–∏–≥—Ä–∞—à, –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö)
            –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö = 0

    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É –∫—ñ–Ω—Ü—ñ
    –≤–∏–≥—Ä–∞—à = –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è_–≤–∏–≥—Ä–∞—à_—Å–∏–º–≤–æ–ª—É(wild, –≤–∏–≥—Ä–∞—à, –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö)
    return –≤–∏–≥—Ä–∞—à

def –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è):
    """–í–∏–∑–Ω–∞—á–∞—î –≤–∏–≥—Ä–∞—à –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —Ç–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏–ø–ª–∞—Ç."""
    –≤–∏–≥—Ä–∞—à = 0
    –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö = 1
    –ø–æ—Ç–æ—á–Ω–∏–π_—Å–∏–º–≤–æ–ª = –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è[0]
    for i in range(1, len(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)):
        if –ø–æ—Ç–æ—á–Ω–∏–π_—Å–∏–º–≤–æ–ª == wild:
            –ø–æ—Ç–æ—á–Ω–∏–π_—Å–∏–º–≤–æ–ª = –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è[i]
        if –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è[i] == wild or –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è[i] == –ø–æ—Ç–æ—á–Ω–∏–π_—Å–∏–º–≤–æ–ª:
            –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö += 1
        else:
            –≤–∏–≥—Ä–∞—à = –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è_–≤–∏–≥—Ä–∞—à_—Å–∏–º–≤–æ–ª—É(–ø–æ—Ç–æ—á–Ω–∏–π_—Å–∏–º–≤–æ–ª, –≤–∏–≥—Ä–∞—à, –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö)
            –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö = 1
            –ø–æ—Ç–æ—á–Ω–∏–π_—Å–∏–º–≤–æ–ª = –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è[i]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É –∫—ñ–Ω—Ü—ñ
    –≤–∏–≥—Ä–∞—à = –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è_–≤–∏–≥—Ä–∞—à_—Å–∏–º–≤–æ–ª—É(–ø–æ—Ç–æ—á–Ω–∏–π_—Å–∏–º–≤–æ–ª, –≤–∏–≥—Ä–∞—à, –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö)
    # –î–æ–¥–∞—î–º–æ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó –≤–∏–∫–ª—é—á–Ω–æ –∑ –¥–∏–∫–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    if –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–æ–¥–Ω–∞–∫–æ–≤–∏—Ö != COLS or –ø–æ—Ç–æ—á–Ω–∏–π_—Å–∏–º–≤–æ–ª != wild: # —â–æ–± –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç–∏ –ª–∏—à–µ –æ–¥–Ω—É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é –∑ –¥–∏–∫–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        –≤–∏–≥—Ä–∞—à += wild_combination_win(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)
    return –≤–∏–≥—Ä–∞—à

# STATIC ANALYSES
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ —Ç–∞–±–ª–∏—Ü—ñ –≤—ñ—Ä–æ–≥—ñ–¥–Ω–æ—Å—Ç–µ–π
def check_total_symbol_probabylity():
    total_probability = 0
    for key in symbols.keys():
        total_probability += symbols[key]

    print(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–∞–ª—å–Ω–æ—ó –≤—ñ—Ä–æ–≥—ñ–¥–Ω–æ—Å—Ç—ñ: {total_probability}")


# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ñ –≤–∏–≥—Ä–∞—à—ñ–≤
# –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–∏–≥—Ä–∞—à—É
def calculate_expected_payout(payouts, probabilities):
    expected_payout = 0
    for symbol, prob in probabilities.items():
        wild_probability = probabilities[wild] if symbol != wild else 0
        if symbol in payouts:
            for match_count, payout in payouts[symbol].items():
                prob_corrected = prob + wild_probability
                total_prob = pow(prob_corrected, match_count) * pow(1 - prob_corrected, COLS - match_count)
                #correction = 1 if match_count == COLS else (COLS - match_count + 1) / –∫—ñ–ª—å–∫—ñ—Å—Ç—å_–±–∞—Ä–∞–±–∞–Ω—ñ–≤
                #total_prob *= correction
                correction = 1
                combination_payout = total_prob * payout * (COLS - match_count + 1)
                print(f"{symbol} of {match_count}, prob+wild {prob_corrected:.2f}, total_prob {total_prob:.6f}, correction: {correction}, payout: {combination_payout:.6f}")
                expected_payout += combination_payout
        print()
    return expected_payout

def check_machine_tables():
    check_total_symbol_probabylity()
    # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ –≤–∏–≥—Ä–∞—à—É
    average_payout = calculate_expected_payout(paytable, symbols)
    print(f"–û—á–∏–∫—É–≤–∞–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–≥—Ä–∞—à: {average_payout:.4f}")
    #input("Press Enter to continue...\n")
    return average_payout

def simple_test_01():
    –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è = ['üçπ', 'üçâ', 'üçâ', 'üçâ', 'üçπ']
    win = –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)
    print(f" {–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è} : {win}")

    –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è = ['üçπ', 'üçπ', 'üçâ', 'üçâ', 'üçâ']
    win = –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)
    print(f" {–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è} : {win}")

    –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è = ['üçâ', 'üçâ', 'üçâ', 'üçπ', 'üçπ']
    win = –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)
    print(f" {–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è} : {win}")

    –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è = ['üçπ', 'üçâ', 'üçâ', 'üçâ', 'üçê']
    win = –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)
    print(f" {–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è} : {win}")

    –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è = ['üçê', 'üçâ', 'üçâ', 'üçâ', 'üçπ']
    win = –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)
    print(f" {–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è} : {win}")

    –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è = ['üçâ', 'üçâ', 'üçâ', 'üçê', 'üçê']
    win = –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)
    print(f" {–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è} : {win}")

    –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è = ['üçê', 'üçâ', 'üçâ', 'üçâ', 'üçê']
    win = –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)
    print(f" {–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è} : {win}")

    –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è = ['üçê', 'üçê', 'üçâ', 'üçâ', 'üçâ']
    win = –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è)
    print(f" {–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è} : {win}")

    exit(0)


# TESTS SETUP
test_iterations = 2
–±–∞–ª–∞–Ω—Å = 1000000
—Å—Ç–∞–≤–∫–∞_–Ω–∞_—Å–ø—ñ–Ω = 1
show_wins = 0

if __name__ == "__main__":

    make_population() # –ó—Ä–æ–±–∏—Ç–∏ –±–∞—Ä–∞–±–∞–Ω

    average_payout = check_machine_tables()
    #simple_test_01()
    print("-" * 25)

    # –ü—Ä–∏–∫–ª–∞–¥ —Å–∏–º—É–ª—è—Ü—ñ—ó –∫—ñ–ª—å–∫–æ—Ö –æ–±–µ—Ä—Ç–∞–Ω—å
    –∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à_ = 0
    —Å—É–º–º–∞_—Å—Ç–∞–≤–æ–∫_ = 0

    print(f"\nSIMULATING : {test_iterations} tests with {–±–∞–ª–∞–Ω—Å} client balans")

    for i in range(test_iterations):
        print("Please wait ...")

        #STATISTICS
        zeros_couter = 0
        wins_list =[]
        –ø–æ—Ç–æ—á–Ω–∏–π_–±–∞–ª–∞–Ω—Å = –±–∞–ª–∞–Ω—Å
        –∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à = 0
        —Å—É–º–º–∞_—Å—Ç–∞–≤–æ–∫ = 0
        —Å–ø—ñ–Ω = 0

        while –ø–æ—Ç–æ—á–Ω–∏–π_–±–∞–ª–∞–Ω—Å > 0:
            –ø–æ—Ç–æ—á–Ω–∏–π_–±–∞–ª–∞–Ω—Å -= —Å—Ç–∞–≤–∫–∞_–Ω–∞_—Å–ø—ñ–Ω
            —Å—É–º–º–∞_—Å—Ç–∞–≤–æ–∫ += —Å—Ç–∞–≤–∫–∞_–Ω–∞_—Å–ø—ñ–Ω
            —Å–ø—ñ–Ω += 1
            –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è = –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏_–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é()

            –≤–∏–≥—Ä–∞—à_–∑–∞_—Å–ø—ñ–Ω = –≤–∏–∑–Ω–∞—á–∏—Ç–∏_–≤–∏–≥—Ä–∞—à(–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è) * —Å—Ç–∞–≤–∫–∞_–Ω–∞_—Å–ø—ñ–Ω
            –∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à += –≤–∏–≥—Ä–∞—à_–∑–∞_—Å–ø—ñ–Ω
            –ø–æ—Ç–æ—á–Ω–∏–π_–±–∞–ª–∞–Ω—Å  += –≤–∏–≥—Ä–∞—à_–∑–∞_—Å–ø—ñ–Ω
            if –≤–∏–≥—Ä–∞—à_–∑–∞_—Å–ø—ñ–Ω > 0:
                wins_list.append(–≤–∏–≥—Ä–∞—à_–∑–∞_—Å–ø—ñ–Ω)
            else:
                zeros_couter += 1

            if show_wins and –≤–∏–≥—Ä–∞—à_–∑–∞_—Å–ø—ñ–Ω > 500:
                print(f"–°–ø—ñ–Ω: {—Å–ø—ñ–Ω}  {–∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è}, win: {–≤–∏–≥—Ä–∞—à_–∑–∞_—Å–ø—ñ–Ω}")

        #print(f"\n–°—Ç–∞–≤–∫–∞ –Ω–∞ —Å–ø—ñ–Ω {—Å—Ç–∞–≤–∫–∞_–Ω–∞_—Å–ø—ñ–Ω}")
        print(f"\n–ò—Ç–µ—Ä–∞—Ü–∏—è {i}\n=============")
        print(f"\n–ó–∞ {—Å–ø—ñ–Ω} —Å–ø–∏–Ω—ñ–≤ —Ç–∞ {—Å—É–º–º–∞_—Å—Ç–∞–≤–æ–∫} —Å—Ç–∞–≤–æ–∫ –∑–∞–≥–∞–ª—å–Ω–∏–π –≤–∏–≥—Ä–∞—à —Å–∫–ª–∞–≤: {–∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à} –∫—Ä–µ–¥–∏—Ç—ñ–≤.")

        # STATISTIC CALC
        –∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à_ += –∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à
        —Å—É–º–º–∞_—Å—Ç–∞–≤–æ–∫_ += —Å—É–º–º–∞_—Å—Ç–∞–≤–æ–∫

        arithmetic_mean = –∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à / —Å–ø—ñ–Ω
        variance_of_wins = zeros_couter * arithmetic_mean * arithmetic_mean
        for val in wins_list:
            variance_of_wins += (val - arithmetic_mean) ** 2

        variance_of_wins = math.sqrt (variance_of_wins / (—Å–ø—ñ–Ω - 1))
        max_win = max(wins_list)
        attraction = max_win / variance_of_wins
        hit_frequency = len(wins_list) / —Å–ø—ñ–Ω

        dirty_income = —Å—É–º–º–∞_—Å—Ç–∞–≤–æ–∫ - –∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à
        # –ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü–µ–≤—ñ (RTP): Theoretical RTP / Actual RTP
        print(f"–û—á–∏–∫—É–≤–∞–Ω–∏–π —Å–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–≥—Ä–∞—à –∑–∞ —Å—Ç–∞–≤–∫—É: {average_payout:.4f} —Ä–µ–∞–ª—å–Ω–æ: {(–∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à / —Å—É–º–º–∞_—Å—Ç–∞–≤–æ–∫):.4f}")
        print(f"hit frequency: {hit_frequency : .4f}")
        print(f"dirty income: {dirty_income}")

        print(f"arithmetic mean: {arithmetic_mean:.6f}  variance of wins: {variance_of_wins:.4f}")
        print(f"maximum one-time win: {max_win} attration: {attraction:.2f}")


        # OTHER
        """
        –°–µ—Ä–µ–¥–Ω—è —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —ñ–≥—Ä–æ–≤–æ—ó —Å–µ—Å—ñ—ó (Average Session Length): 
        –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–∏–Ω—ñ–≤ –∞–±–æ —á–∞—Å
        –°–µ—Ä–µ–¥–Ω—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ —Å–ø—ñ–Ω (Average Bet per Spin): 
        –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Å—Ç–∞–≤–∫–∞ (Maximum and Minimum Bet): 
        –ß–∞—Å –∑–∞—Ç—Ä–∏–º–∫–∏ (Latency): –ß–∞—Å –º—ñ–∂ –¥—ñ—î—é –≥—Ä–∞–≤—Ü—è (–Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º –∫–Ω–æ–ø–∫–∏ "–ø—É—Å–∫") —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É.
        –ü–æ–º–∏–ª–∫–∏ —Ç–∞ –∑–±–æ—ó (Errors and Bugs): 
        """

        print("====================================\n\n")


    print(f"\nGRAND TOTAL:\n====================")
    print(f"–°–µ—Ä–µ–¥–Ω—è —Ä–µ–∞–ª—å–Ω–∞ –≤–∏–¥–∞—á–∞: {(–∑–∞–≥–∞–ª—å–Ω–∏–π_–≤–∏–≥—Ä–∞—à_ / —Å—É–º–º–∞_—Å—Ç–∞–≤–æ–∫_):.4f}")
    print(f"")

